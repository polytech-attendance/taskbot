/*
 * This file is generated by jOOQ.
 */
package ru.spbstu.ai.r2dbc.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;

import ru.spbstu.ai.r2dbc.db.Keys;
import ru.spbstu.ai.r2dbc.db.Public;
import ru.spbstu.ai.r2dbc.db.tables.Owner.OwnerPath;
import ru.spbstu.ai.r2dbc.db.tables.records.TaskRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>public.task.task_id</code>.
     */
    public final TableField<TaskRecord, Integer> TASK_ID = createField(DSL.name("task_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.task.owner_id</code>.
     */
    public final TableField<TaskRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.task.summary</code>.
     */
    public final TableField<TaskRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.task.deadline</code>.
     */
    public final TableField<TaskRecord, OffsetDateTime> DEADLINE = createField(DSL.name("deadline"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.task.status</code>.
     */
    public final TableField<TaskRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.task.estimated_time</code>.
     */
    public final TableField<TaskRecord, YearToSecond> ESTIMATED_TIME = createField(DSL.name("estimated_time"), SQLDataType.INTERVAL, this, "");

    /**
     * The column <code>public.task.spent_time</code>.
     */
    public final TableField<TaskRecord, YearToSecond> SPENT_TIME = createField(DSL.name("spent_time"), SQLDataType.INTERVAL, this, "");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>public.task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>public.task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> Task(Table<O> path, ForeignKey<O, TaskRecord> childPath, InverseForeignKey<O, TaskRecord> parentPath) {
        super(path, childPath, parentPath, TASK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TaskPath extends Task implements Path<TaskRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TaskPath(Table<O> path, ForeignKey<O, TaskRecord> childPath, InverseForeignKey<O, TaskRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TaskPath(Name alias, Table<TaskRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TaskPath as(String alias) {
            return new TaskPath(DSL.name(alias), this);
        }

        @Override
        public TaskPath as(Name alias) {
            return new TaskPath(alias, this);
        }

        @Override
        public TaskPath as(Table<?> alias) {
            return new TaskPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TaskRecord, Integer> getIdentity() {
        return (Identity<TaskRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.TASK_PKEY;
    }

    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK__TASK_OWNER_ID_FKEY);
    }

    private transient OwnerPath _owner;

    /**
     * Get the implicit join path to the <code>public.owner</code> table.
     */
    public OwnerPath owner() {
        if (_owner == null)
            _owner = new OwnerPath(this, Keys.TASK__TASK_OWNER_ID_FKEY, null);

        return _owner;
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    @Override
    public Task as(Table<?> alias) {
        return new Task(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Table<?> name) {
        return new Task(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Condition condition) {
        return new Task(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Task where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Task whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
