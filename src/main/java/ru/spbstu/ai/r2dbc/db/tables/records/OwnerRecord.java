/*
 * This file is generated by jOOQ.
 */
package ru.spbstu.ai.r2dbc.db.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import ru.spbstu.ai.r2dbc.db.tables.Owner;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OwnerRecord extends UpdatableRecordImpl<OwnerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.owner.owner_id</code>.
     */
    public void setOwnerId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.owner.owner_id</code>.
     */
    public Integer getOwnerId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.owner.telegram_id</code>.
     */
    public void setTelegramId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.owner.telegram_id</code>.
     */
    public Integer getTelegramId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OwnerRecord
     */
    public OwnerRecord() {
        super(Owner.OWNER);
    }

    /**
     * Create a detached, initialised OwnerRecord
     */
    public OwnerRecord(Integer ownerId, Integer telegramId) {
        super(Owner.OWNER);

        setOwnerId(ownerId);
        setTelegramId(telegramId);
        resetChangedOnNotNull();
    }
}
