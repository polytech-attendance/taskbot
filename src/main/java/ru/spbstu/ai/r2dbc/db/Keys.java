/*
 * This file is generated by jOOQ.
 */
package ru.spbstu.ai.r2dbc.db;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.spbstu.ai.r2dbc.db.tables.Owner;
import ru.spbstu.ai.r2dbc.db.tables.RecurringTask;
import ru.spbstu.ai.r2dbc.db.tables.Task;
import ru.spbstu.ai.r2dbc.db.tables.records.OwnerRecord;
import ru.spbstu.ai.r2dbc.db.tables.records.RecurringTaskRecord;
import ru.spbstu.ai.r2dbc.db.tables.records.TaskRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<OwnerRecord> OWNER_PKEY = Internal.createUniqueKey(Owner.OWNER, DSL.name("owner_pkey"), new TableField[] { Owner.OWNER.OWNER_ID }, true);
    public static final UniqueKey<RecurringTaskRecord> RECURRING_TASK_PKEY = Internal.createUniqueKey(RecurringTask.RECURRING_TASK, DSL.name("recurring_task_pkey"), new TableField[] { RecurringTask.RECURRING_TASK.RECURRING_TASK_ID }, true);
    public static final UniqueKey<TaskRecord> TASK_PKEY = Internal.createUniqueKey(Task.TASK, DSL.name("task_pkey"), new TableField[] { Task.TASK.TASK_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<RecurringTaskRecord, OwnerRecord> RECURRING_TASK__RECURRING_TASK_OWNER_ID_FKEY = Internal.createForeignKey(RecurringTask.RECURRING_TASK, DSL.name("recurring_task_owner_id_fkey"), new TableField[] { RecurringTask.RECURRING_TASK.OWNER_ID }, Keys.OWNER_PKEY, new TableField[] { Owner.OWNER.OWNER_ID }, true);
    public static final ForeignKey<TaskRecord, OwnerRecord> TASK__TASK_OWNER_ID_FKEY = Internal.createForeignKey(Task.TASK, DSL.name("task_owner_id_fkey"), new TableField[] { Task.TASK.OWNER_ID }, Keys.OWNER_PKEY, new TableField[] { Owner.OWNER.OWNER_ID }, true);
}
