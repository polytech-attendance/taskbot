/*
 * This file is generated by jOOQ.
 */
package ru.spbstu.ai.r2dbc.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;

import ru.spbstu.ai.r2dbc.db.Keys;
import ru.spbstu.ai.r2dbc.db.Public;
import ru.spbstu.ai.r2dbc.db.tables.Owner.OwnerPath;
import ru.spbstu.ai.r2dbc.db.tables.records.RecurringTaskRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RecurringTask extends TableImpl<RecurringTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recurring_task</code>
     */
    public static final RecurringTask RECURRING_TASK = new RecurringTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecurringTaskRecord> getRecordType() {
        return RecurringTaskRecord.class;
    }

    /**
     * The column <code>public.recurring_task.recurring_task_id</code>.
     */
    public final TableField<RecurringTaskRecord, Integer> RECURRING_TASK_ID = createField(DSL.name("recurring_task_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.recurring_task.owner_id</code>.
     */
    public final TableField<RecurringTaskRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.recurring_task.summary</code>.
     */
    public final TableField<RecurringTaskRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recurring_task.start</code>.
     */
    public final TableField<RecurringTaskRecord, OffsetDateTime> START = createField(DSL.name("start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.recurring_task.period</code>.
     */
    public final TableField<RecurringTaskRecord, YearToSecond> PERIOD = createField(DSL.name("period"), SQLDataType.INTERVAL, this, "");

    /**
     * The column <code>public.recurring_task.finish</code>.
     */
    public final TableField<RecurringTaskRecord, OffsetDateTime> FINISH = createField(DSL.name("finish"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.recurring_task.status</code>.
     */
    public final TableField<RecurringTaskRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    private RecurringTask(Name alias, Table<RecurringTaskRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RecurringTask(Name alias, Table<RecurringTaskRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.recurring_task</code> table reference
     */
    public RecurringTask(String alias) {
        this(DSL.name(alias), RECURRING_TASK);
    }

    /**
     * Create an aliased <code>public.recurring_task</code> table reference
     */
    public RecurringTask(Name alias) {
        this(alias, RECURRING_TASK);
    }

    /**
     * Create a <code>public.recurring_task</code> table reference
     */
    public RecurringTask() {
        this(DSL.name("recurring_task"), null);
    }

    public <O extends Record> RecurringTask(Table<O> path, ForeignKey<O, RecurringTaskRecord> childPath, InverseForeignKey<O, RecurringTaskRecord> parentPath) {
        super(path, childPath, parentPath, RECURRING_TASK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RecurringTaskPath extends RecurringTask implements Path<RecurringTaskRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RecurringTaskPath(Table<O> path, ForeignKey<O, RecurringTaskRecord> childPath, InverseForeignKey<O, RecurringTaskRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RecurringTaskPath(Name alias, Table<RecurringTaskRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RecurringTaskPath as(String alias) {
            return new RecurringTaskPath(DSL.name(alias), this);
        }

        @Override
        public RecurringTaskPath as(Name alias) {
            return new RecurringTaskPath(alias, this);
        }

        @Override
        public RecurringTaskPath as(Table<?> alias) {
            return new RecurringTaskPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RecurringTaskRecord, Integer> getIdentity() {
        return (Identity<RecurringTaskRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecurringTaskRecord> getPrimaryKey() {
        return Keys.RECURRING_TASK_PKEY;
    }

    @Override
    public List<ForeignKey<RecurringTaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECURRING_TASK__RECURRING_TASK_OWNER_ID_FKEY);
    }

    private transient OwnerPath _owner;

    /**
     * Get the implicit join path to the <code>public.owner</code> table.
     */
    public OwnerPath owner() {
        if (_owner == null)
            _owner = new OwnerPath(this, Keys.RECURRING_TASK__RECURRING_TASK_OWNER_ID_FKEY, null);

        return _owner;
    }

    @Override
    public RecurringTask as(String alias) {
        return new RecurringTask(DSL.name(alias), this);
    }

    @Override
    public RecurringTask as(Name alias) {
        return new RecurringTask(alias, this);
    }

    @Override
    public RecurringTask as(Table<?> alias) {
        return new RecurringTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringTask rename(String name) {
        return new RecurringTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringTask rename(Name name) {
        return new RecurringTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringTask rename(Table<?> name) {
        return new RecurringTask(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringTask where(Condition condition) {
        return new RecurringTask(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringTask where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringTask where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringTask where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringTask where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringTask where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringTask where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringTask where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringTask whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringTask whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
